Video 1 - REST

REST - Representational State Transfer
The way we should use HTTP to create web services and applications. Focuses on transferring the state of a resource (a noun/entity) from one application/machine to another.

JSON - JavaScript Object Notation
Preferred way to transfer the state of a resource. Typically conveyed in key-value pairs.

e.g. bank account resource

This (below) represents the state of an account resource at a given time.

{
    accountNumber: "09986345",
    balance: 670.34,
    accountType: "checking"
}

The state can be transferred from the front end to the back end, etc.


Video 2 - HTTP Methods to perform CRUD operations on REST resources

CRUD - Create/Read/Update/Delete - use HTTP verb methods Post/Get/Update/Delete

HTTP (POST) Request ---> Resource created (computer to server, payload)
HTTP (GET) Request ---> Read a resource or group of resources (no payload)
HTTP (UPDATE) Request ---> Update a Resource (payload)
HTTP (DELETE) Request ---> Delete a Resource (doesn't typically include a payload)

Payload - a text, typically JSON, that describes what we want the request to do and further information

<---HTTP Response


Video 3 - HTTP Requests with Fetch

Fetch lets us send an HTTP request and returns a promise that we can then handle (built into JS).

Can take 1 or 2 parameters: 1. URL, 2. Object used to give further details.

const ENDPOINT = 'https://ancient-taiga-31359.herokuapp.com/api/houses';


fetch(ENDPOINT);  /*get request */

fetch(ENDPOINT, { /*post request */
method: 'POST',
headers:  {
  'Content-Type': 'application/json'
  },
  body: JSON.stringify({
  name: 'Fetch House'
  }) 
  });


 fetch(`${ENDPOINT}/62156059e7086e00172521aa`,  {
    method :'DELETE',
    headers: {
        'Content-Type': 'application/json'
    }
 });; 

*doublecheck syntax for delete and put

//handling the data/error that comes back, dealing with the promise
fetch(ENDPOINT)
    .then(res =>res.json())
    .then(res => {
        res.forEach(house => document.write(house.name))
    });



Video 4 - Request CRUD Tutorial

In React, if we use class based components, we should put them in the componentDidMount lifecycle

Video - Functional components

Functional components for components that don't need state *Is this still true?
Use class for state

Can add props into functional component like this:

const Person = (props) => {
	//destructure props
	const { name, age } = props;
	return (
		<div>
			<h1>{name}</h1>
			<h2>Age: {age}</h2>
		</div>
	);
};

Pass in the props when the component is called like this:

function App() {
	return (
		<div className='App'>
			<Person name='Janell' age='49' />
			<Person name='Alan' age='50' />
		</div>
	);
}

Spread operator (...) allows us to take an iterable object (e.g., object literal, array, function parameters) and spread it out over anything that takes multiple values.

Example:

    function doSomething (a, b, c) {
        console.log(a, b, c);   
    }

Normal function call
    doSomething(1, 2, 3);


let array = [5, 6, 7];

Normal function call for array
    doSomething(array); <-- Will only count 'array' as one of the parameters/values

Using spread operator
    doSomething(...array); <-- Takes all three values (5, 6, 7) just like doSomething(5, 6, 7)

Works with objects too

Let obj1={
    name: '01"
    value1: 1,
    value2: 2
}

let clone = {...obj1} <--will take all properties from obj1 and create a new object with it

Can also use the spread operator to take all the properties but also update some of the properties like this:
    let clone = {...obj1, name: '02'}


Video - Destructuring
Destructuring allows us to take an array or an object and break their values apart into distinct variables. Used for imports a lot.

Example:
let array = [3, 5, 7, 9];
let object = {
    propertyOne: 'p-one',
    propertyTwo: 'p-two,
    propertyThree: 'p-three'
}

Destructured:

ARRAY
let [a, b, c ] = array;

console.log(a) --> 3
console.log(b) --> 5
console.log(b) --> 7

OBJECTS (must use the names from the original object)

let {propertyOne, propertyThree} = object;

console.log(propertyThree) --> 'p-three'

IN REACT Example
import {Component} from 'react';
or
import React, {Component} from 'react';


Video - HOOKS
Used to access state or a lifecycle method inside a functional component
Hooks allow us to use state and other features without having to write a class.

STATE HOOK - allows us to use state inside a functional component
Example - see code (router-practice, APP component).

EFFECT HOOK - http requests instead of in ComponentDidMount method
use effect function, function will be executed after every render of the component, including the very first rendering
--use effect takes another funciton as an argument


Video - ASYNC AWAIT

//USING PROMISES
const HOUSES_ENDPOINT = 'https://ancient-taiga-31359.herokuapp.com/api/houses';

const getHouses = () => {
    fetch(HOUSES_ENDPOINT)
        .then(response => response.json())
        .then(response => console.log(response));
}

getHouses()

//ASYNC AWAIT INSTEAD - any await call has to be inside of an async function

const HOUSES_ENDPOINT = 'https://ancient-taiga-31359.herokuapp.com/api/houses';

const getHouses = async  () => {
    const response = await fetch(HOUSES_ENDPOINT); //<--returns response
    const json = await response.json();// <--returns body from response
    console.log(json);
}
getHouses();


